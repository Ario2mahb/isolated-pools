{
  "address": "0xE60a1F3c5e04B3be9b177Da94bC1ae5dd0c994aD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jumpMultiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kink_",
          "type": "uint256"
        },
        {
          "internalType": "contract IAccessControlManager",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract JumpRateModelV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7cfdbffb668b0b1d4ff4a20e2b49fd4b1c40aa417ec54225789b8604c0ee2f6",
  "receipt": {
    "to": null,
    "from": "0x8BDA9f9E1fEF0DFd404Fef338D9fE4c543d172e1",
    "contractAddress": "0xE60a1F3c5e04B3be9b177Da94bC1ae5dd0c994aD",
    "transactionIndex": 2,
    "gasUsed": "615968",
    "logsBloom": "0x
    "blockHash": "0xb00f0cc00d55d7498a1228ebaf14ab919d2a0901601cbc6f7063e8681c77a1c5",
    "transactionHash": "0xe7cfdbffb668b0b1d4ff4a20e2b49fd4b1c40aa417ec54225789b8604c0ee2f6",
    "logs": [],
    "blockNumber": 28205673,
    "cumulativeGasUsed": "697370",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8fc3d3439b822440c1deeb4764b9d48f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"},{\"internalType\":\"contract IAccessControlManager\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract JumpRateModelV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factories/JumpRateModelFactory.sol\":\"JumpRateModelFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"contracts/BaseJumpRateModelV2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"./Governance/IAccessControlManager.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Logic for Compound's JumpRateModel Contract V2.\\n * @author Compound (modified by Dharma Labs, refactored by Arr00)\\n * @notice Version 2 modifies Version 1 by enabling updateable parameters.\\n */\\nabstract contract BaseJumpRateModelV2 is InterestRateModel {\\n    uint256 private constant BASE = 1e18;\\n\\n    /**\\n     * @notice The address of the AccessControlManager contract\\n     */\\n    IAccessControlManager public accessControlManager;\\n\\n    /**\\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n     */\\n    uint256 public constant blocksPerYear = 10512000;\\n\\n    /**\\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n     */\\n    uint256 public multiplierPerBlock;\\n\\n    /**\\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n     */\\n    uint256 public baseRatePerBlock;\\n\\n    /**\\n     * @notice The multiplierPerBlock after hitting a specified utilization point\\n     */\\n    uint256 public jumpMultiplierPerBlock;\\n\\n    /**\\n     * @notice The utilization point at which the jump multiplier is applied\\n     */\\n    uint256 public kink;\\n\\n    /**\\n     * @notice Thrown when the action is prohibited by AccessControlManager\\n     */\\n    error Unauthorized(address sender, address calledContract, string methodSignature);\\n\\n    event NewInterestParams(\\n        uint256 baseRatePerBlock,\\n        uint256 multiplierPerBlock,\\n        uint256 jumpMultiplierPerBlock,\\n        uint256 kink\\n    );\\n\\n    /**\\n     * @notice Construct an interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     * @param accessControlManager_ The address of the AccessControlManager contract\\n     */\\n    constructor(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_,\\n        IAccessControlManager accessControlManager_\\n    ) {\\n        require(address(accessControlManager_) != address(0), \\\"invalid ACM address\\\");\\n\\n        accessControlManager = accessControlManager_;\\n\\n        _updateJumpRateModel(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModel(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_\\n    ) external virtual {\\n        string memory signature = \\\"updateJumpRateModel(uint256,uint256,uint256,uint256)\\\";\\n        bool isAllowedToCall = accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert Unauthorized(msg.sender, address(this), signature);\\n        }\\n\\n        _updateJumpRateModel(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Calculates the current supply rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param reserveFactorMantissa The current reserve factor for the market\\n     * @return The supply rate percentage per block as a mantissa (scaled by BASE)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) public view virtual override returns (uint256) {\\n        uint256 oneMinusReserveFactor = BASE - reserveFactorMantissa;\\n        uint256 borrowRate = _getBorrowRate(cash, borrows, reserves);\\n        uint256 rateToPool = (borrowRate * oneMinusReserveFactor) / BASE;\\n        return (utilizationRate(cash, borrows, reserves) * rateToPool) / BASE;\\n    }\\n\\n    /**\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market (currently unused)\\n     * @return The utilization rate as a mantissa between [0, BASE]\\n     */\\n    function utilizationRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) public pure returns (uint256) {\\n        // Utilization rate is 0 when there are no borrows\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        return (borrows * BASE) / (cash + borrows - reserves);\\n    }\\n\\n    /**\\n     * @notice Internal function to update the parameters of the interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function _updateJumpRateModel(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_\\n    ) internal {\\n        baseRatePerBlock = baseRatePerYear / blocksPerYear;\\n        multiplierPerBlock = (multiplierPerYear * BASE) / (blocksPerYear * kink_);\\n        jumpMultiplierPerBlock = jumpMultiplierPerYear / blocksPerYear;\\n        kink = kink_;\\n\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by BASE)\\n     */\\n    function _getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) internal view returns (uint256) {\\n        uint256 util = utilizationRate(cash, borrows, reserves);\\n\\n        if (util <= kink) {\\n            return ((util * multiplierPerBlock) / BASE) + baseRatePerBlock;\\n        } else {\\n            uint256 normalRate = ((kink * multiplierPerBlock) / BASE) + baseRatePerBlock;\\n            uint256 excessUtil;\\n            unchecked {\\n                excessUtil = util - kink;\\n            }\\n            return ((excessUtil * jumpMultiplierPerBlock) / BASE) + normalRate;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17553ab0ae8a5a1e94ef7aafa4dc1c44781cc840d7a4392d718a5bbbc3904130\",\"license\":\"BSD-3-Clause\"},\"contracts/Factories/JumpRateModelFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"../JumpRateModelV2.sol\\\";\\n\\ncontract JumpRateModelFactory {\\n    function deploy(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_,\\n        IAccessControlManager accessControlManager_\\n    ) external returns (JumpRateModelV2) {\\n        JumpRateModelV2 rate = new JumpRateModelV2(\\n            baseRatePerYear,\\n            multiplierPerYear,\\n            jumpMultiplierPerYear,\\n            kink_,\\n            accessControlManager_\\n        );\\n\\n        return rate;\\n    }\\n}\\n\",\"keccak256\":\"0x49426e987fd7eabf39070c448c57f93fa806d66f149ce8fa098edd127dfd8c9f\",\"license\":\"BSD-3-Clause\"},\"contracts/Governance/IAccessControlManager.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAccessControlManager is IAccessControl {\\n    function giveCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToPermit\\n    ) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cff4500a4ac227783b0dd58e64a1b267ed0c87cf07320769d6efed4945a87f8\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x574f726b1806c3ca7323b5b4c0fa2da440c733cb07d62f7f160cf9d305a87d14\",\"license\":\"BSD-3-Clause\"},\"contracts/JumpRateModelV2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"./BaseJumpRateModelV2.sol\\\";\\n\\n/**\\n * @title Compound's JumpRateModel Contract V2 for V2 vTokens\\n * @author Arr00\\n * @notice Supports only for V2 vTokens\\n */\\ncontract JumpRateModelV2 is BaseJumpRateModelV2 {\\n    constructor(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_,\\n        IAccessControlManager accessControlManager_\\n    ) BaseJumpRateModelV2(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_, accessControlManager_) {}\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view override returns (uint256) {\\n        return _getBorrowRate(cash, borrows, reserves);\\n    }\\n}\\n\",\"keccak256\":\"0xcf8a14804cc9105eb6d85088b3adbdbd318b720a720d5cf482c1ff32002c943c\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a32806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cccfa36114610030575b600080fd5b61004361003e3660046100d1565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808686868686604051610073906100c4565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a001604051809103906000f0801580156100b8573d6000803e3d6000fd5b50979650505050505050565b6108d28061012b83390190565b600080600080600060a086880312156100e957600080fd5b8535945060208601359350604086013592506060860135915060808601356001600160a01b038116811461011c57600080fd5b80915050929550929590935056fe608060405234801561001057600080fd5b506040516108d23803806108d283398101604081905261002f9161016c565b84848484846001600160a01b03811661008e5760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642041434d206164647265737300000000000000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0383161790556100b5858585856100c4565b50505050505050505050610216565b6100d162a06680856101c7565b6002556100e18162a066806101e9565b6100f3670de0b6b3a7640000856101e9565b6100fd91906101c7565b60015561010d62a06680836101c7565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b600080600080600060a0868803121561018457600080fd5b855160208701516040880151606089015160808a0151939850919650945092506001600160a01b03811681146101b957600080fd5b809150509295509295909350565b6000826101e457634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561021157634e487b7160e01b600052601160045260246000fd5b500290565b6106ad806102256000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a385fb9611610071578063a385fb961461011d578063b4a0bdf314610127578063b816881614610152578063b9f9850a14610165578063f14039de1461016e578063fd2da3391461017757600080fd5b806315f24053146100ae5780632037f3e7146100d45780632191f92a146100e95780636e71e2d8146101015780638726bb8914610114575b600080fd5b6100c16100bc366004610497565b610180565b6040519081526020015b60405180910390f35b6100e76100e23660046104c3565b610197565b005b6100f1600181565b60405190151581526020016100cb565b6100c161010f366004610497565b61026e565b6100c160015481565b6100c162a0668081565b60005461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b6100c16101603660046104c3565b6102b1565b6100c160035481565b6100c160025481565b6100c160045481565b600061018d84848461032d565b90505b9392505050565b600060405180606001604052806034815260200161064460349139600080546040516318c5e8ab60e01b815292935090916001600160a01b03909116906318c5e8ab906101ea9033908690600401610542565b602060405180830381865afa158015610207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022b9190610566565b90508061025a57333083604051634a3fa29360e01b815260040161025193929190610588565b60405180910390fd5b610266868686866103ef565b505050505050565b60008260000361028057506000610190565b8161028b84866105d3565b61029591906105eb565b6102a7670de0b6b3a764000085610602565b61018d9190610621565b6000806102c683670de0b6b3a76400006105eb565b905060006102d587878761032d565b90506000670de0b6b3a76400006102ec8484610602565b6102f69190610621565b9050670de0b6b3a76400008161030d8a8a8a61026e565b6103179190610602565b6103219190610621565b98975050505050505050565b60008061033b85858561026e565b9050600454811161037c57600254670de0b6b3a7640000600154836103609190610602565b61036a9190610621565b61037491906105d3565b915050610190565b6000600254670de0b6b3a764000060015460045461039a9190610602565b6103a49190610621565b6103ae91906105d3565b905060006004548303905081670de0b6b3a7640000600354836103d19190610602565b6103db9190610621565b6103e591906105d3565b9350505050610190565b6103fc62a0668085610621565b60025561040c8162a06680610602565b61041e670de0b6b3a764000085610602565b6104289190610621565b60015561043862a0668083610621565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b6000806000606084860312156104ac57600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156104d957600080fd5b5050823594602084013594506040840135936060013592509050565b6000815180845260005b8181101561051b576020818501810151868301820152016104ff565b8181111561052d576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061018d908301846104f5565b60006020828403121561057857600080fd5b8151801515811461019057600080fd5b6001600160a01b038481168252831660208201526060604082018190526000906105b4908301846104f5565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156105e6576105e66105bd565b500190565b6000828210156105fd576105fd6105bd565b500390565b600081600019048311821515161561061c5761061c6105bd565b500290565b60008261063e57634e487b7160e01b600052601260045260246000fd5b50049056fe7570646174654a756d70526174654d6f64656c2875696e743235362c75696e743235362c75696e743235362c75696e7432353629a26469706673582212206f6d5653ba5094fd533fb0398a80b334d611f3ef52f38bbd9d122d8cea58210864736f6c634300080d0033a26469706673582212203df9f5eebaaf89ad9f43263e618354d471c1b0aeb057218f8ae82a99d6c1888164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cccfa36114610030575b600080fd5b61004361003e3660046100d1565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808686868686604051610073906100c4565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a001604051809103906000f0801580156100b8573d6000803e3d6000fd5b50979650505050505050565b6108d28061012b83390190565b600080600080600060a086880312156100e957600080fd5b8535945060208601359350604086013592506060860135915060808601356001600160a01b038116811461011c57600080fd5b80915050929550929590935056fe608060405234801561001057600080fd5b506040516108d23803806108d283398101604081905261002f9161016c565b84848484846001600160a01b03811661008e5760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642041434d206164647265737300000000000000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0383161790556100b5858585856100c4565b50505050505050505050610216565b6100d162a06680856101c7565b6002556100e18162a066806101e9565b6100f3670de0b6b3a7640000856101e9565b6100fd91906101c7565b60015561010d62a06680836101c7565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b600080600080600060a0868803121561018457600080fd5b855160208701516040880151606089015160808a0151939850919650945092506001600160a01b03811681146101b957600080fd5b809150509295509295909350565b6000826101e457634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561021157634e487b7160e01b600052601160045260246000fd5b500290565b6106ad806102256000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a385fb9611610071578063a385fb961461011d578063b4a0bdf314610127578063b816881614610152578063b9f9850a14610165578063f14039de1461016e578063fd2da3391461017757600080fd5b806315f24053146100ae5780632037f3e7146100d45780632191f92a146100e95780636e71e2d8146101015780638726bb8914610114575b600080fd5b6100c16100bc366004610497565b610180565b6040519081526020015b60405180910390f35b6100e76100e23660046104c3565b610197565b005b6100f1600181565b60405190151581526020016100cb565b6100c161010f366004610497565b61026e565b6100c160015481565b6100c162a0668081565b60005461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b6100c16101603660046104c3565b6102b1565b6100c160035481565b6100c160025481565b6100c160045481565b600061018d84848461032d565b90505b9392505050565b600060405180606001604052806034815260200161064460349139600080546040516318c5e8ab60e01b815292935090916001600160a01b03909116906318c5e8ab906101ea9033908690600401610542565b602060405180830381865afa158015610207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022b9190610566565b90508061025a57333083604051634a3fa29360e01b815260040161025193929190610588565b60405180910390fd5b610266868686866103ef565b505050505050565b60008260000361028057506000610190565b8161028b84866105d3565b61029591906105eb565b6102a7670de0b6b3a764000085610602565b61018d9190610621565b6000806102c683670de0b6b3a76400006105eb565b905060006102d587878761032d565b90506000670de0b6b3a76400006102ec8484610602565b6102f69190610621565b9050670de0b6b3a76400008161030d8a8a8a61026e565b6103179190610602565b6103219190610621565b98975050505050505050565b60008061033b85858561026e565b9050600454811161037c57600254670de0b6b3a7640000600154836103609190610602565b61036a9190610621565b61037491906105d3565b915050610190565b6000600254670de0b6b3a764000060015460045461039a9190610602565b6103a49190610621565b6103ae91906105d3565b905060006004548303905081670de0b6b3a7640000600354836103d19190610602565b6103db9190610621565b6103e591906105d3565b9350505050610190565b6103fc62a0668085610621565b60025561040c8162a06680610602565b61041e670de0b6b3a764000085610602565b6104289190610621565b60015561043862a0668083610621565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b6000806000606084860312156104ac57600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156104d957600080fd5b5050823594602084013594506040840135936060013592509050565b6000815180845260005b8181101561051b576020818501810151868301820152016104ff565b8181111561052d576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061018d908301846104f5565b60006020828403121561057857600080fd5b8151801515811461019057600080fd5b6001600160a01b038481168252831660208201526060604082018190526000906105b4908301846104f5565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156105e6576105e66105bd565b500190565b6000828210156105fd576105fd6105bd565b500390565b600081600019048311821515161561061c5761061c6105bd565b500290565b60008261063e57634e487b7160e01b600052601260045260246000fd5b50049056fe7570646174654a756d70526174654d6f64656c2875696e743235362c75696e743235362c75696e743235362c75696e7432353629a26469706673582212206f6d5653ba5094fd533fb0398a80b334d611f3ef52f38bbd9d122d8cea58210864736f6c634300080d0033a26469706673582212203df9f5eebaaf89ad9f43263e618354d471c1b0aeb057218f8ae82a99d6c1888164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
