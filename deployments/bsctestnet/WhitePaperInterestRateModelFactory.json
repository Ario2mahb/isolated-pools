{
  "address": "0xd953c1F799DB524FDf7698D309117D7ABf095C2E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract WhitePaperInterestRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x495706a6eeff4f129ba4246b5656d6ca0d8faf731c32f9989f8e901fc5261e71",
  "receipt": {
    "to": null,
    "from": "0x2Ce1d0ffD7E869D9DF33e28552b12DdDed326706",
    "contractAddress": "0xd953c1F799DB524FDf7698D309117D7ABf095C2E",
    "transactionIndex": 0,
    "gasUsed": "367259",
    "logsBloom": "0x
    "blockHash": "0xace14927e3bb7b59db0ebfee44bd27af34e83909bbda2fdf0798f9e95f78d2d9",
    "transactionHash": "0x495706a6eeff4f129ba4246b5656d6ca0d8faf731c32f9989f8e901fc5261e71",
    "logs": [],
    "blockNumber": 29527168,
    "cumulativeGasUsed": "367259",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cd0d5e88a97abee9e5cf3c89ec401256",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract WhitePaperInterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factories/WhitePaperInterestRateModelFactory.sol\":\"WhitePaperInterestRateModelFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Factories/WhitePaperInterestRateModelFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"../WhitePaperInterestRateModel.sol\\\";\\n\\ncontract WhitePaperInterestRateModelFactory {\\n    function deploy(uint256 baseRatePerYear, uint256 multiplierPerYear) external returns (WhitePaperInterestRateModel) {\\n        WhitePaperInterestRateModel rate = new WhitePaperInterestRateModel(baseRatePerYear, multiplierPerYear);\\n\\n        return rate;\\n    }\\n}\\n\",\"keccak256\":\"0x4743ee3d95bf5419e479b7c433d468473a47127ed70b1c155524bc184250a556\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x574f726b1806c3ca7323b5b4c0fa2da440c733cb07d62f7f160cf9d305a87d14\",\"license\":\"BSD-3-Clause\"},\"contracts/WhitePaperInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's WhitePaperInterestRateModel Contract\\n * @author Compound\\n * @notice The parameterized model described in section 2.4 of the original Compound Protocol whitepaper\\n */\\ncontract WhitePaperInterestRateModel is InterestRateModel {\\n    uint256 private constant BASE = 1e18;\\n\\n    /**\\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n     */\\n    uint256 public constant blocksPerYear = 2102400;\\n\\n    /**\\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n     */\\n    uint256 public immutable multiplierPerBlock;\\n\\n    /**\\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n     */\\n    uint256 public immutable baseRatePerBlock;\\n\\n    event NewInterestParams(uint256 baseRatePerBlock, uint256 multiplierPerBlock);\\n\\n    /**\\n     * @notice Construct an interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n     */\\n    constructor(uint256 baseRatePerYear, uint256 multiplierPerYear) {\\n        baseRatePerBlock = baseRatePerYear / blocksPerYear;\\n        multiplierPerBlock = multiplierPerYear / blocksPerYear;\\n\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock);\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by BASE)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) public view override returns (uint256) {\\n        uint256 ur = utilizationRate(cash, borrows, reserves);\\n        return ((ur * multiplierPerBlock) / BASE) + baseRatePerBlock;\\n    }\\n\\n    /**\\n     * @notice Calculates the current supply rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param reserveFactorMantissa The current reserve factor for the market\\n     * @return The supply rate percentage per block as a mantissa (scaled by BASE)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) public view override returns (uint256) {\\n        uint256 oneMinusReserveFactor = BASE - reserveFactorMantissa;\\n        uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\\n        uint256 rateToPool = (borrowRate * oneMinusReserveFactor) / BASE;\\n        return (utilizationRate(cash, borrows, reserves) * rateToPool) / BASE;\\n    }\\n\\n    /**\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market (currently unused)\\n     * @return The utilization rate as a mantissa between [0, BASE]\\n     */\\n    function utilizationRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) public pure returns (uint256) {\\n        // Utilization rate is 0 when there are no borrows\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        return (borrows * BASE) / (cash + borrows - reserves);\\n    }\\n}\\n\",\"keccak256\":\"0x7374217abb5b188ca9d367b07937f10638fa2470b5d3c2ad51e2c82401549210\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506105b8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635e79bb6014610030575b600080fd5b61004361003e3660046100ad565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808383604051610070906100a0565b9182526020820152604001604051809103906000f080158015610097573d6000803e3d6000fd5b50949350505050565b6104b3806100d083390190565b600080604083850312156100c057600080fd5b5050803592602090910135915056fe60c060405234801561001057600080fd5b506040516104b33803806104b383398101604081905261002f91610099565b61003c62201480836100bd565b60a05261004c62201480826100bd565b608081905260a0516040517ff35fa19c15e9ba782633a5df62a98b20217151addc68e3ff2cd623a48d37ec279261008a928252602082015260400190565b60405180910390a150506100df565b600080604083850312156100ac57600080fd5b505080516020909101519092909150565b6000826100da57634e487b7160e01b600052601260045260246000fd5b500490565b60805160a0516103a26101116000396000818161011c015261015001526000818160d8015261017d01526103a26000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638726bb891161005b5780638726bb89146100d3578063a385fb96146100fa578063b816881614610104578063f14039de1461011757600080fd5b806315f24053146100825780632191f92a146100a85780636e71e2d8146100c0575b600080fd5b610095610090366004610288565b61013e565b6040519081526020015b60405180910390f35b6100b0600181565b604051901515815260200161009f565b6100956100ce366004610288565b6101c1565b6100957f000000000000000000000000000000000000000000000000000000000000000081565b6100956220148081565b6100956101123660046102b4565b61020c565b6100957f000000000000000000000000000000000000000000000000000000000000000081565b60008061014c8585856101c1565b90507f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400006101a27f0000000000000000000000000000000000000000000000000000000000000000846102fc565b6101ac919061031b565b6101b6919061033d565b9150505b9392505050565b6000826000036101d3575060006101ba565b816101de848661033d565b6101e89190610355565b6101fa670de0b6b3a7640000856102fc565b610204919061031b565b949350505050565b60008061022183670de0b6b3a7640000610355565b9050600061023087878761013e565b90506000670de0b6b3a764000061024784846102fc565b610251919061031b565b9050670de0b6b3a7640000816102688a8a8a6101c1565b61027291906102fc565b61027c919061031b565b98975050505050505050565b60008060006060848603121561029d57600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156102ca57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610316576103166102e6565b500290565b60008261033857634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610350576103506102e6565b500190565b600082821015610367576103676102e6565b50039056fea26469706673582212202ed8ab752550a6fdfbdb238951fd00ed2d5855cf2dde8919fb67b9a1702da21264736f6c634300080d0033a2646970667358221220be92f7fc306bf472af0e5a728081775d269f3a0aa7a2c2f610ecc940bb3fefa064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80635e79bb6014610030575b600080fd5b61004361003e3660046100ad565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808383604051610070906100a0565b9182526020820152604001604051809103906000f080158015610097573d6000803e3d6000fd5b50949350505050565b6104b3806100d083390190565b600080604083850312156100c057600080fd5b5050803592602090910135915056fe60c060405234801561001057600080fd5b506040516104b33803806104b383398101604081905261002f91610099565b61003c62201480836100bd565b60a05261004c62201480826100bd565b608081905260a0516040517ff35fa19c15e9ba782633a5df62a98b20217151addc68e3ff2cd623a48d37ec279261008a928252602082015260400190565b60405180910390a150506100df565b600080604083850312156100ac57600080fd5b505080516020909101519092909150565b6000826100da57634e487b7160e01b600052601260045260246000fd5b500490565b60805160a0516103a26101116000396000818161011c015261015001526000818160d8015261017d01526103a26000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638726bb891161005b5780638726bb89146100d3578063a385fb96146100fa578063b816881614610104578063f14039de1461011757600080fd5b806315f24053146100825780632191f92a146100a85780636e71e2d8146100c0575b600080fd5b610095610090366004610288565b61013e565b6040519081526020015b60405180910390f35b6100b0600181565b604051901515815260200161009f565b6100956100ce366004610288565b6101c1565b6100957f000000000000000000000000000000000000000000000000000000000000000081565b6100956220148081565b6100956101123660046102b4565b61020c565b6100957f000000000000000000000000000000000000000000000000000000000000000081565b60008061014c8585856101c1565b90507f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400006101a27f0000000000000000000000000000000000000000000000000000000000000000846102fc565b6101ac919061031b565b6101b6919061033d565b9150505b9392505050565b6000826000036101d3575060006101ba565b816101de848661033d565b6101e89190610355565b6101fa670de0b6b3a7640000856102fc565b610204919061031b565b949350505050565b60008061022183670de0b6b3a7640000610355565b9050600061023087878761013e565b90506000670de0b6b3a764000061024784846102fc565b610251919061031b565b9050670de0b6b3a7640000816102688a8a8a6101c1565b61027291906102fc565b61027c919061031b565b98975050505050505050565b60008060006060848603121561029d57600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156102ca57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610316576103166102e6565b500290565b60008261033857634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610350576103506102e6565b500190565b600082821015610367576103676102e6565b50039056fea26469706673582212202ed8ab752550a6fdfbdb238951fd00ed2d5855cf2dde8919fb67b9a1702da21264736f6c634300080d0033a2646970667358221220be92f7fc306bf472af0e5a728081775d269f3a0aa7a2c2f610ecc940bb3fefa064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
